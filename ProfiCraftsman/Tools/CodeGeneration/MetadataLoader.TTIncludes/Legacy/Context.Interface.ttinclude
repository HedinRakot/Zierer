<#
    EntitiesGenerationContext context = generationContext;
    if (context.EntityContainer == null)
    {
        return string.Empty;
    }
    var codeNamespace = context.Code.VsNamespaceSuggestion();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1") #>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2") #>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3") #>
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Data.Entity.Core.Objects;
<#=context.ExtraUsages #>
<#
if (!string.IsNullOrEmpty(codeNamespace))
{
#>

namespace <#=context.Code.EscapeNamespace(codeNamespace) #>
{
<#
    PushIndent("    ");
}
#>
/// <summary>
/// Interface for <#=context.Code.Escape(context.EntityContainer) #> context
/// </summary>
public partial interface I<#=context.Code.Escape(context.EntityContainer) #>:IEntities
{ 
<#
    foreach (var entitySet in context.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
        var type = context.TypeMapper.GetTypeName(entitySet.ElementType);
        var nameSet = context.Pluralize(context.Code.Escape(entitySet));
#>
    /// <summary>
    /// Set of <see cref="<#=type #>"/> entities from table <#=context.Code.GetFullTableName(entitySet) #>
    /// </summary>
    IQueryable<<#=type #>> <#=nameSet #> { get; }
<#
    }

    if (context.HasEdmxProcedures)
    {
#>

<#
	    var modelNamespace =  context.MetadataLoader.GetModelNamespace(context.EdmxFile.FullName);
        foreach (var edmFunction in context.EntityContainerProcedures.FunctionImports)
        {
            WriteFunctionImport(context, edmFunction, modelNamespace, false);
        }
    }
#>
}
<#

if (!String.IsNullOrEmpty(codeNamespace))
{
    PopIndent();
#>
}
<#
}
#>
<#+

private void WriteFunctionImport(EntitiesGenerationContext context, EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
{
#>

<#=context.CodeStringGenerator.WriteFunctionComment(context, edmFunction, 4) #>
<#+
    if (context.TypeMapper.IsComposable(edmFunction))
    {
#>
    <#=context.CodeStringGenerator.ComposableFunctionMethod(edmFunction, modelNamespace, true) #>;    
<#+
    }
    else
    {
#>
    <#=context.CodeStringGenerator.FunctionMethod(edmFunction, modelNamespace, includeMergeOption, true) #>;  
<#+
        if (context.TypeMapper.GenerateMergeOptionFunction(edmFunction, includeMergeOption))
        {
            WriteFunctionImport(context, edmFunction, modelNamespace, true);
        }
    }
}
#>