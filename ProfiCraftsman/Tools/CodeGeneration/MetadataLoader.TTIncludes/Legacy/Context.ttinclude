<#
    EntitiesGenerationContext context = generationContext;
	
	var modelNamespace =  context.MetadataLoader.GetModelNamespace(context.EdmxFile.FullName);
    if (context.EntityContainer == null)
    {
        return string.Empty;
    }
    var codeNamespace = context.Code.VsNamespaceSuggestion();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Data.SqlClient;
<#
if (context.EntityContainer.FunctionImports.Any())
{
#>
using System.Data.Objects;
using System.Data.Objects.DataClasses;
<#
}
#>
<#=context.ExtraUsages#>
<#
if (!string.IsNullOrEmpty(codeNamespace))
{
#>
namespace <#=context.Code.EscapeNamespace(codeNamespace)#>
{
<#
    PushIndent("    ");
}

#>
/// <summary>
/// Database context for <#=context.Code.Escape(context.EntityContainer)#>
/// </summary>
<#=Accessibility.ForType(context.EntityContainer)#> partial class <#=context.Code.Escape(context.EntityContainer)#> : DbContext, I<#=context.Code.Escape(context.EntityContainer)#>
{
	/// <summary>
    /// Gets set of entities
    /// </summary>
    /// <typeparam name="TEntity">type of entities</typeparam>
    /// <returns></returns>
    public IQueryable<TEntity> GetSet<TEntity>()
               where TEntity : class
    {
        return Set<TEntity>();
    }
    
    /// <summary>
    /// Add entity in context 
    /// </summary>
    /// <typeparam name="TEntity">Type of adding entity</typeparam>
    /// <param name="entity">Adding entity</param>
    public void AddObject<TEntity>(TEntity entity)
           where TEntity : class
    {
        Set<TEntity>().Add(entity);
    }
    
    /// <summary>
    /// Create entity without adding it to context. Use <see cref="IEntities.AddObject{TEntity}"/> to add object to context
    /// </summary>
    /// <typeparam name="TEntity"></typeparam>
    /// <returns></returns>
    public TEntity CreateObject<TEntity>() where TEntity : class
    {
        return Set<TEntity>().Create();
    }
    
    /// <summary>
    /// Update entity in context 
    /// </summary>
    /// <typeparam name="TEntity">Type of updating entity</typeparam>
    /// <param name="entity">Updating entity</param>
    public void UpdateObject<TEntity>(TEntity entity)
        where TEntity : class
    {
        //var entry = Entry(entity);
        //entry.State = EntityState.Modified;
    }

    /// <summary>
    /// Delete entity in context 
    /// </summary>
    /// <typeparam name="TEntity">Type of deleting entity</typeparam>
    /// <param name="entity">Deleting entity</param>
    public void DeleteObject<TEntity>(TEntity entity)
        where TEntity : class
    {
        Set<TEntity>().Remove(entity);
    }

	
	/// <summary>
    /// This method is called when the model for a derived context has been initialized, but
    ///                 before the model has been locked down and used to initialize the context.  The default
    ///                 implementation of this method does nothing, but it can be overridden in a derived class
    ///                 such that the model can be further configured before it is locked down.
    /// </summary>
    /// <remarks>
    /// Typically, this method is called only once when the first instance of a derived context
    ///                 is created.  The model for that context is then cached and is for all further instances of
    ///                 the context in the app domain.  This caching can be disabled by setting the ModelCaching
    ///                 property on the given ModelBuidler, but note that this can seriously degrade performance.
    ///                 More control over caching is provided through use of the DbModelBuilder and DbContextFactory
    ///                 classes directly.
    /// </remarks>
    /// <param name="modelBuilder">The builder that defines the model for the context being created.</param>
    protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
<#
    foreach (var set in context.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
#>
            modelBuilder.Configurations.Add(<#= context.Code.Escape(set.ElementType.Name) #>Mapping.Instance);
<#
    }
#>
        }

<#
    foreach (var entitySet in context.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {
        var type = context.TypeMapper.GetTypeName(entitySet.ElementType);
        var nameSet = context.Pluralize(context.Code.Escape(entitySet));
#>
    /// <summary>
    /// Set of <see cref="<#=type#>"/> entities from table <#=context.Code.GetFullTableName(entitySet)#>
    /// </summary>
    <#=Accessibility.ForReadOnlyProperty(entitySet)#> DbSet<<#=type#>> <#=nameSet#> { get; set; }
<#
    }
#>

<#
    var interfaceName = "I" + context.Code.Escape(context.EntityContainer);
	foreach (var entitySet in context.EntityContainer.BaseEntitySets.OfType<EntitySet>())
    {

	var type = context.TypeMapper.GetTypeName(entitySet.ElementType);
    var nameSet = context.Pluralize(context.Code.Escape(entitySet));
#>
    /// <summary>
    /// Set of <see cref="<#=type#>"/> entities from table <#=context.Code.GetFullTableName(entitySet)#>
    /// </summary>
    IQueryable<<#=type#>> <#=interfaceName#>.<#=nameSet#> { get{ return <#=nameSet#>;} }
<#
    }

	if (context.HasEdmxProcedures)
    {
        foreach (var edmFunction in context.EntityContainerProcedures.FunctionImports)
        {
            WriteFunctionImport(context, edmFunction, modelNamespace, false);
        }
    }

#>
}    
<#

if (!String.IsNullOrEmpty(codeNamespace))
{
    PopIndent();
#>
}
<#
}
#>
<#+

private void WriteFunctionImport(EntitiesGenerationContext context, EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
{
#>

<#=context.CodeStringGenerator.WriteFunctionComment(context, edmFunction, 4) #>
<#+      
    if (context.TypeMapper.IsComposable(edmFunction))
    {   
#>
    [EdmFunction("<#=edmFunction.NamespaceName #>", "<#=edmFunction.Name #>")]
    <#=context.CodeStringGenerator.ComposableFunctionMethod(edmFunction, modelNamespace, false) #>
    {
<#+
        context.CodeStringGenerator.WriteFunctionParameters(edmFunction, WriteFunctionParameter);
#>
        <#=context.CodeStringGenerator.ComposableCreateQuery(edmFunction, modelNamespace) #>
    }
<#+
    }
    else
    {
#>
    <#=context.CodeStringGenerator.FunctionMethod(edmFunction, modelNamespace, includeMergeOption, false) #>
    {
<#+
        context.CodeStringGenerator.WriteFunctionParameters(edmFunction, WriteFunctionParameter);
#>
        <#=context.CodeStringGenerator.ExecuteStoreQuery(edmFunction, context.GetFuncSchema, modelNamespace, includeMergeOption) #>
    }
<#+
        if (context.TypeMapper.GenerateMergeOptionFunction(edmFunction, includeMergeOption))
        {
            WriteFunctionImport(context, edmFunction, modelNamespace, true);
        }
    }
}

public void WriteFunctionParameter(string name, string isNotNull, string notNullInit, string nullInit)
{
#>
        var <#=name#> = <#=isNotNull#> ? <#=notNullInit#> : <#=nullInit#>;
<#+
}
#>