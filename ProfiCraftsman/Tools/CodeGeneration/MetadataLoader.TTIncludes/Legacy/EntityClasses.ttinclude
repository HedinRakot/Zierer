<#@ import namespace="System.Collections.Generic" #>
<#+

    public abstract class BaseEntityInfo
    {
        protected BaseEntityInfo()
        {
            Accessibility = "public";
            Attributes = new List<string>();
        }

        public string Name { get; set; }
        public string Accessibility { get; set; }
        public List<string> Attributes { get; set; }
		
        public override string ToString()
        {
            return string.Format("{0} {1}", Accessibility, Name);
        }
    }

    public sealed class PropertySetterEntityInfo : BaseEntityInfo
    {
        public PropertySetterEntityInfo()
        {
            Name = "set";
        }
    }

    public sealed class PropertyGetterEntityInfo : BaseEntityInfo
    {
        public PropertyGetterEntityInfo()
        {
            Name = "get";
        }
    }

    public enum PropertyModelType
    {
        None = 0,
        Simple = 1,
        Complex = 2,
        NavigationSingle = 3,
		NavigationCollection = 4
    }

    public sealed class PropertyEntityInfo : BaseEntityInfo
    {
        private PropertySetterEntityInfo _setter;
        private PropertyGetterEntityInfo _getter;
		private readonly EntityInfo _entity;

        public PropertyEntityInfo(EntityInfo entity)
        {
            InViewModelClass = true;
            Comment = string.Empty;
			_entity = entity;
        }

		public EntityInfo Entity
		{
			get { return _entity; }
		}

		public EdmMember EdmProperty { get;set; }
		//Is column type enum
		public bool IsEnum { get;set; }
		//Is key column
		public bool IsKey { get;set; }

		public string ColumnName { get; set; }
        public string Comment { get; set; }

        public PropertyModelType ModelType { get; set; }
        public string Type { get; set; }
		public string ItemType { get; set; }
		public string FullType 
		{
		    get
		    {
		        if (string.IsNullOrWhiteSpace(Type))
		        {
		            return String.Empty;
		        }
		        return Type + (IsNullable && ModelType == PropertyModelType.Simple ? "?" : string.Empty);
		    }
		}

        public bool HasDefaultValue
        {
            get
            {
                return !string.IsNullOrWhiteSpace(DefaultValue);
            }
        }

        public string DefaultValue { get; set; }

        /// <summary>
///   Nullable for value type
/// </summary>
        public bool IsNullable { get; set; }
        /// <summary>
        ///   Is required field in db
        /// </summary>
		public bool IsRequired { get ;set ;}
		public bool IsVirtual { get; set; }
        public bool InViewModelClass { get; set; }

        public bool HasSetter
        {
            get { return _setter != null; }
        }

        public PropertySetterEntityInfo Setter
        {
            get { return _setter ?? (_setter = new PropertySetterEntityInfo()); }
        }

        public bool HasGetter
        {
            get { return _getter != null; }
        }

        public PropertyGetterEntityInfo Getter
        {
            get { return _getter ?? (_getter = new PropertyGetterEntityInfo()); }
        }
    }

    public sealed class EntityInfo : BaseEntityInfo
    {
        public EntityInfo()
        {
            Properties = new List<PropertyEntityInfo>();
            Interfaces = new List<InterfaceItem>();
			InterfaceImplicitProperties = new List<InterfacePropertyTemplate>();
        }

		public EntityType Entity { get ;set ;}

		public string Comment { get ;set ;}

		public string TableSchemaName { get; set; }
        public string TableName { get; set; }
        public string GetFullTableName()
        {
            return string.IsNullOrWhiteSpace(TableSchemaName) ? TableName : TableSchemaName + "." + TableName;
        }

        public bool IsAbstract { get; set; }
        public bool IsPartial { get; set; }

        public string BaseType { get; set; }
        public List<PropertyEntityInfo> Properties { get; private set; }

		//get properties without navigation properties
        public IEnumerable<PropertyEntityInfo> GetPlainProperties()
        {
            return Properties.Where(info => info.ModelType == PropertyModelType.Simple || info.ModelType == PropertyModelType.Complex);
        }

        public bool HasBaseType
        {
            get
            {
                return !string.IsNullOrWhiteSpace(BaseType);
            }
        }
		public List<InterfaceItem> Interfaces { get; private set; }
		public List<InterfacePropertyTemplate> InterfaceImplicitProperties { get; private set; }		
    }
	//NOTE: Temporary class. Need resolve interfaces by correct way
    public class InterfaceItem
    {
        public InterfaceItem(string codeName, InterfaceTemplate iface)
        {
            CodeName = codeName;
            Interface = iface;
        }

        public string CodeName { get; private set; }
        public InterfaceTemplate Interface { get; private set; }
    }

    public sealed class InterfaceEntityInfo : BaseEntityInfo
    {
        public InterfaceEntityInfo()
        {
            Properties = new List<InterfacePropertyEntityInfo>();
        }

        public List<InterfacePropertyEntityInfo> Properties { get; private set; }
    }

    public class InterfacePropertyEntityInfo : BaseEntityInfo
    {
        public bool HasGetter { get; set; }
        public bool HasSetter { get; set; }
    }

	public class InterfaceTemplate
    {
        public InterfaceTemplate()
        {
			GenericParameters = new List<string>();
            Properties = new List<InterfacePropertyTemplate>();
            BaseInterfaces = new List<InterfaceTemplate>();
			BaseNames = new string[0];
        }

        public string Name { get; set; }

		public string CodeName
		{
			get
			{
			   return IsGeneric?string.Format("{0}<{1}>", Name, string.Join(", ", GenericParameters)): Name;
            }
		}
		public string Comment { get; set; }
		public List<string> GenericParameters { get; private set; }
		public List<InterfacePropertyTemplate> Properties { get; private set; }
		public List<InterfaceTemplate> BaseInterfaces { get;private set; }
		public string[] BaseNames { get; set; }

		public bool IsGeneric
        {
			get{return GenericParameters.Count != 0;}
        }

        public bool IsValid()
        {
            foreach (var property in GetAllProperties())
            {
                if (!property.IsTypeDefined)
                {
                    return false;
                }
            }
            return true;
        }

        public IEnumerable<InterfacePropertyTemplate> GetAllProperties()
        {
            foreach (var p in Properties)
            {
                yield return p;
            }
            foreach (var baseInterface in BaseInterfaces)
            {
                foreach (var p in baseInterface.GetAllProperties())
                {
                    yield return p;
                }
            }
        }

        public override string ToString()
        {
            return string.Format("{0}, Properties: {1}, Base:{2} Comment:{3}", Name, Properties.Count, string.Join(",", BaseInterfaces.Select(template => template.Name)), Comment);
        }
    }
	
    public class InterfacePropertyTemplate
    {
		public InterfaceTemplate Interface{ get;set; }
        public string Name { get; set; }
		public string Comment { get; set; }
        public string Type { get; set; }
		public bool IsTypeGeneric { get; set; }

        public bool IsTypeDefined
        {
            get { return !string.IsNullOrWhiteSpace(Type); }
        }

        public bool CheckType(string type)
        {
            if (IsTypeDefined)
            {
                if (string.IsNullOrWhiteSpace(type))
                {
                    return false;
                }
                return type.EndsWith(Type);
            }
            Type = type;
            return true;
        }

        public override string ToString()
        {
            return string.Format("{0}, Type: {1} Comment:{2}", Name, Type, Comment);
        }
    }
#>