<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq"#>
<#@ assembly name="EnvDTE"#>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ include file="DynamicTextTransformation.ttinclude" once = "true" #>
<#+

    /// <summary>///   ///   ///   ///   ///   ///   ///   Responsible for marking the various sections of the generation,///   so///   they can///   be///   split///   up///   into///   separate files///////////////////// </summary>
    public class TemplateFileManager
    {
        /// <summary>///   ///   ///   ///   ///   ///   ///   Creates the VsEntityFrameworkTemplateFileManager if VS is detected,//////   otherwise//////   creates///   the///   file///   system version.///////////////////// </summary>
        public static TemplateFileManager Create(DynamicTextTransformation textTransformation)
        {
            var transformation = textTransformation;
            var host = transformation.Host;

#if !PREPROCESSED_TEMPLATE
            var hostServiceProvider = host.AsIServiceProvider();

            if (hostServiceProvider == null)
            {
                return new TemplateFileManager(transformation);
            }
            var dte = (DTE) hostServiceProvider.GetService(typeof (DTE));

            if (dte != null)
            {
                return new VsTemplateFileManager(transformation);
            }
#endif
            return new TemplateFileManager(transformation);
        }

        private sealed class Block
        {
            public String Name;
            public int Start;
            public int Length;
        }

        private readonly List<Block> _files = new List<Block>();
        private readonly Block _footer = new Block();
        private readonly Block _header = new Block();
        private readonly DynamicTextTransformation _textTransformation;

        // reference to the GenerationEnvironment StringBuilder on the
        // TextTransformation object
        private readonly StringBuilder _generationEnvironment;

        private Block _currentBlock;

        /// <summary>///   ///   ///   ///   ///   ///   ///   Initializes an EntityFrameworkTemplateFileManager Instance  with///   the////////////   TextTransformation///   (T4///   generated class) that is currently running///////////////////// </summary>
        private TemplateFileManager(object textTransformation)
        {
            if (textTransformation == null)
            {
                throw new ArgumentNullException("textTransformation");
            }

            _textTransformation = DynamicTextTransformation.Create(textTransformation);
            _generationEnvironment = _textTransformation.GenerationEnvironment;
        }

        /// <summary>///   ///   ///   ///   ///   ///   ///   Marks the end of the last file if there was one, and starts a new///   and///   marks///   this///   point///   in//////   generation as a new file.///////////////////// </summary>
        public void StartNewFile(string name)
        {
            if (name == null)
            {
                throw new ArgumentNullException("name");
            }

            CurrentBlock = new Block {Name = name};
        }

        public void StartFooter()
        {
            CurrentBlock = _footer;
        }

        public void StartHeader()
        {
            CurrentBlock = _header;
        }

        public void EndBlock()
        {
            if (CurrentBlock == null)
            {
                return;
            }

            CurrentBlock.Length = _generationEnvironment.Length - CurrentBlock.Start;

            if (CurrentBlock != _header && CurrentBlock != _footer)
            {
                _files.Add(CurrentBlock);
            }

            _currentBlock = null;
        }

        /// <summary>///   Produce the template output files./// </summary>
        public virtual IEnumerable<string> Process(bool split = true)
        {
            var generatedFileNames = new List<string>();

            if (split)
            {
                EndBlock();

                var headerText = _generationEnvironment.ToString(_header.Start, _header.Length);
                var footerText = _generationEnvironment.ToString(_footer.Start, _footer.Length);
                var outputPath = Path.GetDirectoryName(_textTransformation.Host.TemplateFile);

                _files.Reverse();

                foreach (var block in _files)
                {
                    var fileName = Path.Combine(outputPath, block.Name);
                    var content = headerText + _generationEnvironment.ToString(block.Start, block.Length) + footerText;

                    generatedFileNames.Add(fileName);
                    CreateFile(fileName, content);
                    _generationEnvironment.Remove(block.Start, block.Length);
                }
            }

            return generatedFileNames;
        }

        protected virtual void CreateFile(string fileName, string content)
        {
            if (IsFileContentDifferent(fileName, content))
            {
                File.WriteAllText(fileName, content);
            }
        }

        protected bool IsFileContentDifferent(String fileName, string newContent)
        {
            return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
        }

        public string CurrentFileName
        {
            get
            {
                if (CurrentBlock != null)
                {
                    return CurrentBlock.Name;
                }
                return String.Empty;
            }
        }

        private Block CurrentBlock
        {
            get { return _currentBlock; }
            set
            {
                if (CurrentBlock != null)
                {
                    EndBlock();
                }

                if (value != null)
                {
                    value.Start = _generationEnvironment.Length;
                }

                _currentBlock = value;
            }
        }

#if !PREPROCESSED_TEMPLATE
        private sealed class VsTemplateFileManager : TemplateFileManager
        {
            private readonly ProjectItem _templateProjectItem;
            private readonly DTE _dte;
            private readonly Action<string> _checkOutAction;
            private readonly Action<IEnumerable<string>> _projectSyncAction;

            /// <summary>///   Creates an instance of the VsEntityFrameworkTemplateFileManager class with the IDynamicHost instance/// </summary>
            public VsTemplateFileManager(object textTemplating)
                : base(textTemplating)
            {
                var hostServiceProvider = _textTransformation.Host.AsIServiceProvider();
                if (hostServiceProvider == null)
                {
                    throw new ArgumentNullException("Could not obtain hostServiceProvider");
                }

                _dte = (DTE) hostServiceProvider.GetService(typeof (DTE));
                if (_dte == null)
                {
                    throw new ArgumentNullException("Could not obtain DTE from host");
                }

                _templateProjectItem = _dte.Solution.FindProjectItem(_textTransformation.Host.TemplateFile);

                _checkOutAction = fileName => _dte.SourceControl.CheckOutItem(fileName);
                _projectSyncAction = keepFileNames => ProjectSync(_templateProjectItem, keepFileNames);
            }

            public override IEnumerable<string> Process(bool split = true)
            {
                if (_templateProjectItem.ProjectItems == null)
                {
                    return new List<string>();
                }

                var generatedFileNames = base.Process(split);

                var fileNames = generatedFileNames as string[] ?? generatedFileNames.ToArray();
                _projectSyncAction.EndInvoke(_projectSyncAction.BeginInvoke(fileNames, null, null));

                return fileNames;
            }

            protected override void CreateFile(string fileName, string content)
            {
                if (IsFileContentDifferent(fileName, content))
                {
                    CheckoutFileIfRequired(fileName);
                    File.WriteAllText(fileName, content);
                }
            }

            private static void ProjectSync(ProjectItem templateProjectItem, IEnumerable<string> keepFileNames)
            {
                var fileNames = keepFileNames as string[] ?? keepFileNames.ToArray();
                var keepFileNameSet = new HashSet<string>(fileNames);
                var projectFiles = new Dictionary<string, ProjectItem>();
                var originalOutput = Path.GetFileNameWithoutExtension(templateProjectItem.FileNames[0]);

                foreach (ProjectItem projectItem in templateProjectItem.ProjectItems)
                {
                    projectFiles.Add(projectItem.FileNames[0], projectItem);
                }

                // Remove unused items from the project
                foreach (var pair in projectFiles)
                {
                    if (!fileNames.Contains(pair.Key)
                        && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalOutput + "."))
                    {
                        pair.Value.Delete();
                    }
                }

                // Add missing files to the project
                foreach (var fileName in keepFileNameSet)
                {
                    if (!projectFiles.ContainsKey(fileName))
                    {
                        templateProjectItem.ProjectItems.AddFromFile(fileName);
                    }
                }
            }

            private void CheckoutFileIfRequired(string fileName)
            {
                if (_dte.SourceControl == null
                    || !_dte.SourceControl.IsItemUnderSCC(fileName)
                    || _dte.SourceControl.IsItemCheckedOut(fileName))
                {
                    return;
                }

                // run on worker thread to prevent T4 calling back into VS
                _checkOutAction.EndInvoke(_checkOutAction.BeginInvoke(fileName, null, null));
            }
        }
#endif
    }

#>