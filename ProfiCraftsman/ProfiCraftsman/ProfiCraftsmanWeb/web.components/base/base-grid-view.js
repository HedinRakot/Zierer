define(["base/base-view", "lr!base/resources/base-grid-view", "lr!mixins/resources/kendo-validator-form", "kendo.backbone/backbone.datasource", "kendo.editors/editor-factory", "kendo.filters/filter-factory", "lk!kendo/kendo.grid"], function (e, t, i, a, n, l) { "use strict"; var d = function (e) { var i = this; return _.each(e, function (e) { if (_.isArray(e.columns)) return void d.call(i, e.columns); var t = _.extend({ dataTextField: "name", dataValueField: "id", gridSelector: i.gridSelector }, e), a = new l(t), o = new n(t); if (e.selectBox && (_.extend(e, { template: _.partial(r, t), editor: _.bind(o.selectBox, o), filterable: { ui: _.bind(a.selectBox, a) } }), e.attributes = e.attributes || {}, e.attributes["class"] = "multi " + (e.attributes["class"] ? e.attributes["class"] : "")), e.collection && !e.selectBox) { var s = e.collection; if (e.defaultText) { var s = e.collection.clone(); s.unshift(new Backbone.Model({ id: "", name: e.defaultText })) } _.extend(e, { editor: _.bind(o.dropDownList, o), values: s.map(function (e) { return { text: e.get(t.dataTextField), value: e.get(t.dataValueField) } }) }) } if (e.checkbox) { var c = e.field, u = _.extend({ title: e.headerTitle }, e.headerAttributes); _.extend(e, { template: _.partial(function (e) { var t = e.get(c) ? ' checked="checked"' : ""; return '<input disabled type="checkbox"' + t + " />" }), filterable: !1, sortable: !1, width: "45px", headerAttributes: u, headerTitle: null }) } e.dateTime && _.extend(e, { editor: _.bind(o.dateTimePicker, o) }) }), this.allowToSelect && e.unshift({ field: "selected", title: "&nbsp;", filterable: !1, sortable: !1, template: '<input type="checkbox" data-model-id="#=id#" class="selected" #= typeof selected != "undefined" && selected ? checked="checked" : "" #/>', width: "20px" }), (i.showEditButton || i.showDeleteButton) && e.push({ filterable: !1, sortable: !1, attributes: { "class": "commands" }, template: function () { var e = ""; return i.showEditButton && (e += '<span class="k-icon k-edit" title="' + t.edit + '"></span>'), i.showDeleteButton && (e += '&nbsp;<span class="k-icon k-delete" title="' + t.remove + '"></span>'), e } }), e }, r = function (e, t) { var i = _.map(e.collection.filter(function (i) { return _.contains(t[e.field], i[e.dataValueField]) }), function (t) { return t.get(e.dataTextField) }), a = i.join(", "), n = i.join("[br] [checkbox] ").replace(/"/g, "&quot;"); n && (n = "[checkbox] " + n); var l = '<span title="' + n + '">' + a + "</span>"; return l }, o = function (e) { var t = $(e.target), i = t.data("model-id"); this.collection.get(i).set("selected", t.is(":checked")) }, s = function (e) { if (e.preventDefault(), _.isFunction(this.addNewModel)) this.addNewModel(); else if (this.addNewModelView) { { var t = this.grid, i = new this.collection.model, a = _.extend({ model: i, collection: this.collection }, this.options), n = new this.addNewModelView(a); this.collection } n.resources = _.extend({}, n.resources, this.resources), this.listenTo(n, "base-add-model-view:save", function () { t.dataSource.read(), t.refresh() }), this.addView(n), this.$el.append(n.render().$el) } }, c = function (e) { e.preventDefault(), this.grid.addRow() }, u = function (e) { this.grid.editRow($(e.target).closest("tr")) }, g = function () { this.grid.saveRow() }, f = function () { this.grid.cancelRow() }, b = function (e) { e.preventDefault(); var i = this; require(["base/confirmation-view"], function (a) { var n = new a({ title: t.removeRecord, message: t.removeConfirmation }); i.listenToOnce(n, "continue", function () { i.grid.removeRow($(e.target).closest("tr")) }), i.addView(n), i.$el.append(n.render().$el) }) }, h = e.extend({ gridSelector: null, addNewModelView: null, addNewModel: null, addNewModelInline: null, addingInPopup: !1, detailView: null, initDetailView: null, pageSizes: [10, 20, 50, 100], pageSize: 10, selectable: !1, pageable: { refresh: !0, pageSizes: self.pageSizes }, sortable: !0, filterable: !0, columns: null, showAddButton: !0, showDeleteButton: !0, showEditButton: !0, defaultSorting: null, defaultFitering: null, allowToSelect: !1, remoteDataSource: !0, toolbar: function () { var e = []; return this.showAddButton && e.push(this.addingInPopup ? { name: "create-popup", text: t.add } : { name: "create-inline", text: t.add }), e.length ? e : null }, excel: null, render: function () { h.__super__.render.apply(this, arguments); var e = this; e.gridSelector = e.gridSelector ? e.$(e.gridSelector) : e.$el, e.gridSelector.on("click.base-grid-view", "> table > tbody > tr > td > .selected", _.bind(o, this)), e.gridSelector.on("click.base-grid-view", "> table > tbody > tr > td.commands > .k-edit", _.bind(u, this)), e.gridSelector.on("click.base-grid-view", "> table > tbody > tr > td.commands > .k-update", _.bind(g, this)), e.gridSelector.on("click.base-grid-view", "> table > tbody > tr > td.commands > .k-cancel", _.bind(f, this)), e.gridSelector.on("click.base-grid-view", "> table > tbody > tr > td.commands > .k-delete", _.bind(b, this)), e.addingInPopup ? e.gridSelector.on("click.base-grid-view", "> .k-grid-toolbar > .k-grid-create-popup", _.bind(s, this)) : e.gridSelector.on("click.base-grid-view", "> .k-grid-toolbar > .k-grid-create-inline", _.bind(c, this)); var n = e.collection.model.prototype.fields; e.allowToSelect && (n.selected = { type: "boolean", editable: !1 }); var l = new a({ collection: e.collection, schema: { model: { id: e.collection.model.prototype.idAttribute, fields: n }, data: "data", total: "total" }, sort: _.result(e, "defaultSorting"), filter: _.result(e, "defaultFiltering"), pageSize: e.pageSize, error: function (t) { t.xhr.responseJSON.modelState ? (e.modelState = t.xhr.responseJSON.modelState, $(".k-grid-edit-row").data("kendoValidator").validate(), delete e.modelState) : e.grid.cancelChanges() }, remoteDataSource: e.remoteDataSource }); return e.grid = e.gridSelector.kendoGrid({ dataSource: l, toolbar: _.result(e, "toolbar"), excel: e.excel, columns: d.call(e, _.result(e, "columns")), editable: { mode: "inline" }, sortable: e.sortable, filterable: e.filterable, pageable: e.pageable, selectable: e.selectable, scrollable: !1, edit: function (a) { a.container.find("> td.commands").html('<span class="k-icon k-update" title="' + t.saveChanges + '"></span>&nbsp;<span class="k-icon k-cancel" title="' + t.cancelChanges + '"></span>'); var n = Object.getPrototypeOf(a.model).fields; _.isObject(n) && _.each(n, function (e, t) { if (t) { var i = a.container.find("[name=" + t + "]"), n = e.validation; n && n.date && i.attr("data-date", !0), n && n.integer && i.attr("data-integer", !0), n && n.maxLength && i.attr("data-maxlength", n.maxLength) } }); var l = a.container.data("kendoValidator"), d = l.options.rules, r = l.options.messages; r.required = i.required, r.date = i.date, r.integer = i.integer, r.maxLength = function (e) { var t = Number(e.data("maxlength")); return i.maxLength.replace("%maxLength%", t) }, r.modelState = function (t) { var i = e.modelState["model." + t.attr("name")][0]; return e.resources && e.resources[i] ? i = e.resources[i] : l.options.messages[i] && (i = e.validator.options.messages[i]), i }, d.modelState = function (t) { return !e.modelState || !e.modelState["model." + t.attr("name")] }, d.date = function (e) { if (e.data("date") === !0) { var t = e.val(); if (t) return !!kendo.parseDate(e.val()) } return !0 }, d.integer = function (e) { if (e.data("integer") === !0) { var t = e.val(); if (t) { var i = kendo.parseFloat(t); return i === Math.ceil(i) } } return !0 }, d.maxLength = function (e) { var t = Number(e.data("maxlength")); if (!isNaN(t)) { var i = e.val(); return i.length <= t } return !0 } }, dataBinding: function () { e.$("tbody tr").remove() }, dataBound: function (t) { e.dataBound(t) }, change: function (t) { e.change(t) }, detailTemplate: e.detailView ? '<div class="extendedDetailsContainer"></div><div class="detailsContainer"></div>' : null, detailInit: e.detailView ? function (t) { if (e.initDetailView) e.initDetailView(t); else { var i = _.extend({}, e.options, { model: t.data }), a = new e.detailView(i); e.addView(a), t.detailRow.find(".detailsContainer").append(a.render().$el), t.masterRow.data("detail-view", a) } } : null }).data("kendoGrid"), e.$(".k-grid-toolbar").insertAfter(e.$(".k-grid-pager").length ? e.$(".k-grid-pager") : e.$("table")), this }, close: function () { this.grid.destroy(), this.$el.off(".base-grid-view"), h.__super__.close.apply(this, arguments) }, dataBound: function () { }, change: function () { } }); return h });