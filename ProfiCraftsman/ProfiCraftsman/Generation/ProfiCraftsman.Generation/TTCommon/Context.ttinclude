<#@ import namespace="System.Text" #>
<#@ include file="GenerationContext.ttinclude"  once="true" #>
<#

    IEntitiesGenerationContext context = generationContext;
    var code = context.Code;
    var contextInfo = new ClassInfo
    {
        Name = string.Format("{0}Entities", context.ContextName),
        IsPartial = true,
        Description = string.Format("Database context for for {0}", context.ContextName)
    };
    contextInfo.InheritsFrom(TypeUsageInfo.CreateInterface("I" + contextInfo.Name, ""));


    foreach (var entity in context.Entities)
    {
        var property = new MetadataLoader.Contracts.CSharp.PropertyInfo(entity.Name,
            typeof (IQueryable<>).ToGenericUsageInfo(entity.GetTypeUsage()))
        {
            Description = String.Format("Set of <see cref=\"{0}\"/> entities from table {1}", entity.Name, entity.GetFullTableName())
        };
        contextInfo.AddProperty(property);
    }

    context.WriteAllUsings(new[] {"System.Data.Entity", "System.Linq"}, contextInfo);

    code.WriteLine();
    code.WriteNamespace(); //Area: Namespace
    code.WriteClassDeclaration(contextInfo); //Area: Class

	code.WriteLine("protected override void OnModelCreating(DbModelBuilder modelBuilder)");
	code.StartArea(); //Area: OnModelCreating
	code.WriteLine("base.OnModelCreating(modelBuilder);");
    foreach (var entityInfo in context.Entities)
    {
        code.WriteLine("modelBuilder.Configurations.Add({0}.Instance);", entityInfo.Mapping.Name);
    }
	code.EndArea(); //End Area: OnModelCreating

	code.WriteLine();

    foreach (var property in contextInfo.Properties)
    {
        code.WriteProperty(property, contextInfo);
    }
    code.EndArea(); //End Area:  End Class
    code.EndArea(); //End Area:  End Namespace
#>